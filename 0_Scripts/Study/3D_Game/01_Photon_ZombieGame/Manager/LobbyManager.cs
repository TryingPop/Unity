using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Photon.Pun;           // 유니티용 포톤 컴포넌트
using Photon.Realtime;      // 포톤 서비스 관련 라이브러리
using UnityEngine.UI;

public class LobbyManager : MonoBehaviourPunCallbacks       // Photon.Pun에서 제공하는 클래스
{

    private string gameVersion = "1";   // 게임 버전

    public Text connectionInfoText;     // 네트워크 정보를 표시할 텍스트
    public Button joinButton;           // 룸 접속 버튼

    // 게임 실행과 동시에 마스터 서버 접속 시도
    private void Start()
    {

        // 접속에 필요한 정보(게임 버전) 설정
        PhotonNetwork.GameVersion = gameVersion;
        // 설정한 정보로 마스터 서버 접속 시도
        PhotonNetwork.ConnectUsingSettings();

        // 룸 접속 버튼 잠시 비활성화
        joinButton.interactable = false;
        // 접속 시도 중임을 텍스트로 표시
        connectionInfoText.text = "마스터 서버에 접속 중...";
    }

    // 마스터 서버 접속 성공 시 자동 실행
    public override void OnConnectedToMaster()
    {

        // 룸 접속 버튼 활성화
        joinButton.interactable = true;
        // 접속 정보 표시
        connectionInfoText.text = "온라인 : 마스터 서버와 연결됨";
    }

    // 마스터 서버 접속 실패 시 자동 실행
    public override void OnDisconnected(DisconnectCause cause)
    {

        // 룸 접속 버튼 비활성화
        joinButton.interactable = false;
        //접속 정보 표시
        connectionInfoText.text = "오프라인 : 마스터 서버와 연결되지 않음\n접속 재시도 중...";

        // 마스터 서버로의 재접속 시도
        PhotonNetwork.ConnectUsingSettings();
    }

    // 룸 접속 시도
    public void Connect()
    {

        // 중복 접속 시도를 막기 위해 접속 버튼잠시 비활성화
        joinButton.interactable = false;

        // 마스터 서버에 접속 중이라면
        if (PhotonNetwork.IsConnected)
        {

            // 룸 접속 실행
            connectionInfoText.text = "룸에 접속...";
            PhotonNetwork.JoinRandomRoom();
        }
        else
        {

            // 마스터 서버에 접속 중이 아니라면 마스터 서버에 접속 시도
            connectionInfoText.text = "오프라인 : 마스터 서버와 연결되지 않음\n접속 재시도 중...";
            // 마스터 서버로의 재접속 시도
            PhotonNetwork.ConnectUsingSettings();
        }
    }

    // 빈 방이 없어 랜덤 룸 참가에 실패한 경우 자동 실행
    public override void OnJoinRandomFailed(short returnCode, string message)
    {

        // 접속 상태 표시
        connectionInfoText.text = "빈 방이 없음, 새로운 방 생성...";
        // 최대 4명을 수용 가능한 빈 방 생성
        PhotonNetwork.CreateRoom(null, new RoomOptions { MaxPlayers = 4 });     // 룸 목록을 확인하는 기능이 없으므로 룸의 이름은 입력하지 않았다
    }

    // 룸에 참가 완료된 경우 자동 실행
    public override void OnJoinedRoom()
    {

        // 접속 상태 표시
        connectionInfoText.text = "방 참가 성공";
        // 모든 룸 참가자가 Main 씬을 로드하게 함
        PhotonNetwork.LoadLevel("Make");        // 플레이어들이 동기화된 상태로 씬을 불러온다
                                                // 방장이 이동하면 나머지 플레이어들도 해당 메소드로 같은 씬으로 이동을 하면 방장과 만날 수 있다
    }
}